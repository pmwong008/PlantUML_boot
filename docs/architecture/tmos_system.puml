@startuml
' uncomment the following line and comment the first to use locally
!include ./C4-PlantUML/C4_Container.puml
'!theme sketchy

' LAYOUT_TOP_DOWN()
' LAYOUT_AS_SKETCH()
' LAYOUT_WITH_LEGEND()

title System Diagram for TMOS

Person(member, Member or Guest, "With different user privileges")

System_Boundary(c1, "Django Web Application") {
    Container(whiffy, "Whiffy", "A space for asking questions and play word games.", "Respond with recommendations")
    Container(wiki, "Wiki", "A space for search, rate and comments", "The more a member contributes, the more points they collect.")
    Container(selfie, "Selfie", "A dashboard space", "Provides statistics, badges and entitlement.", "dotnet")

    Container(backend_api, "APIs (in view.py)", "Java, Docker Container", "Provides scrawling and filtering functionality via API", "server")
}

ContainerDb(db_mongo, "Admin DB", "MongoDB", "Stores user registration information, hashed auth credentials, access logs, etc.", "mongo_server")
ContainerDb(db_sql, "Perfume DB", "SQL Database", "Stores Perfume information.", "mysql_server")

System_Ext(External_AI, "AI", "The external AI system", "envelope")

Rel(member, whiffy, "Uses")
Rel(member, wiki, "Uses")
Rel(member, selfie, "Members Only")

' Rel_Neighbor(whiffy, wiki, "Delivers")
Rel(wiki, backend_api, "Uses", "async, JSON/HTTPS")
Rel(whiffy, backend_api, "Uses", "async, JSON/HTTPS")
Rel(selfie, backend_api, "Uses", "async, JSON/HTTPS")

Rel_Back_Neighbor(db_mongo, backend_api, "Reads from", "sync, JDBC")
Rel(backend_api, db_sql,  "Reads from", "sync, JDBC")

'Rel_Back(member, External_AI, "Sends e-mails to")
Rel_Neighbor(backend_api, External_AI,  "Sends requests to", "sync, SMTP")
' Rel_Back(External_AI, backend_api, "Sends e-mails using", "sync, SMTP")

Person(admin, Admin, "With admin privileges")
Rel_Neighbor(admin, db_mongo, "Manage", "sync, JDBC")
Rel(admin, db_sql, "Manage", "sync, JDBC")
@enduml
